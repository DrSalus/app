generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserState {
  INVITED
  ACTIVE
  DISABLED
}

enum Gender {
  MALE
  FEMALE
  NOT_SPECIFIED
}

enum ServiceType {
  VISIT
  LAB
  INSTRUMENTAL
}

enum BookingState {
  BOOKED
  CANCELLED
  COMPLETED
}

model User {
  id                   String    @id @default(uuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  state                UserState @default(ACTIVE)
  firstName            String
  lastName             String
  email                String    @unique
  password             String
  isAdmin              Boolean   @default(false)
  companyId            String?
  resetPasswordToken   String?   @unique
  resetPasswordExpires DateTime?
}

model Patient {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  firstName    String
  lastName     String
  birthDate    DateTime?        @db.Date
  birthCity    String?
  gender       Gender?
  fiscalCode   String?          @unique
  emailAddress String?
  phoneNumber  String?
  bookings     ServiceBooking[]
}

model Clinic {
  id          String            @id @default(uuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String
  address     String
  city        String
  province    String
  postalCode  String
  phoneNumber String?
  doctors     Doctor[]
  services    ServiceOffering[]
  plans       Agenda[]
}

model ClinicalService {
  id         String            @id @default(uuid())
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  name       String
  branchCode String
  leaCode    String
  nomenCode  String
  type       ServiceType       @default(VISIT)
  doctors    ServiceOffering[]
}

model Doctor {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  firstName  String
  lastName   String
  email      String?
  fiscalCode String?

  worksAt      Clinic[]
  services     ServiceOffering[]
  agendas      Agenda[]
  specialities DoctorSpecialty[]
}

model DoctorSpecialty {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  doctors Doctor[]
}

model ServiceOffering {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String?

  service   ClinicalService @relation(fields: [serviceId], references: [id])
  serviceId String

  clinic   Clinic @relation(fields: [clinicId], references: [id])
  clinicId String

  amount Int

  duration Int
  bookings ServiceBooking[]
  agendas  Agenda[]
}

model ServiceBooking {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agenda   Agenda @relation(fields: [agendaId], references: [id])
  agendaId String

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String

  service   ServiceOffering @relation(fields: [serviceId], references: [id])
  serviceId String

  status BookingState @default(BOOKED)

  bookedAt   DateTime
  acceptedAt DateTime?
  rejectedAt DateTime?
  duration   Int
}

model Agenda {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type ServiceType

  clinic   Clinic @relation(fields: [clinicId], references: [id])
  clinicId String

  doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String?

  slotInterval Int @default(30)

  validFrom  DateTime? @db.Date
  validUntil DateTime? @db.Date

  services   ServiceOffering[]
  dailyPlans DailyCalendarPlan[]
  booking    ServiceBooking[]
}

model DailyCalendarPlan {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dayOfWeek Int
  fromHour  Int
  toHour    Int

  agenda   Agenda @relation(fields: [agendaId], references: [id])
  agendaId String
}
